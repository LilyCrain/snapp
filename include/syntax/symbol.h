#ifndef SYNTAX_SYMBOL_H_
#define SYNTAX_SYMBOL_H_

#include <iostream>
#include <string>
#include <map>

namespace Snapp {

    enum class Symbol {
        Unknown,
        Plus,
        Minus,
        Star,
        Slash,
        Percent,
        Exponent,
        Tilde,
        Ampersand,
        Caret,
        Pipe,
        Exclamation,
        Plus2,
        Minus2,
        Ampersand2,
        Pipe2,
        LessThan2,
        GreaterThan2,
        Equal2,
        NotEqual,
        LessThan,
        GreaterThan,
        LessEqual,
        GreaterEqual,
        Equal,
        Dot,
        Comma,
        Colon,
        Semicolon,
        ParenLeft,
        ParenRight,
        SquareLeft,
        SquareRight,
        CurlyLeft,
        CurlyRight,
        Question,
        AtSign,
        Hash,
        Dollar,
        Backslash,
        RangeExc,
        RangeInc,
        RightArrow,
        LambdaArrow,
    };

    const std::map<Symbol, std::string> symbolNames = {
        {Symbol::Plus, "Plus"},
        {Symbol::Minus, "Minus"},
        {Symbol::Star, "Star"},
        {Symbol::Slash, "Slash"},
        {Symbol::Percent, "Percent"},
        {Symbol::Exponent, "Exponent"},
        {Symbol::Tilde, "Tilde"},
        {Symbol::Ampersand, "Ampersand"},
        {Symbol::Caret, "Caret"},
        {Symbol::Pipe, "Pipe"},
        {Symbol::Exclamation, "Exclamation"},
        {Symbol::Plus2, "Plus2"},
        {Symbol::Minus2, "Minus2"},
        {Symbol::Ampersand2, "Ampersand2"},
        {Symbol::Pipe2, "Pipe2"},
        {Symbol::LessThan2, "LessThan2"},
        {Symbol::GreaterThan2, "GreaterThan2"},
        {Symbol::Equal2, "Equal2"},
        {Symbol::NotEqual, "NotEqual"},
        {Symbol::LessThan, "LessThan"},
        {Symbol::GreaterThan, "GreaterThan"},
        {Symbol::LessEqual, "LessEqual"},
        {Symbol::GreaterEqual, "GreaterEqual"},
        {Symbol::Equal, "Equal"},
        {Symbol::Dot, "Dot"},
        {Symbol::Comma, "Comma"},
        {Symbol::Colon, "Colon"},
        {Symbol::Semicolon, "Semicolon"},
        {Symbol::ParenLeft, "ParenLeft"},
        {Symbol::ParenRight, "ParenRight"},
        {Symbol::SquareLeft, "SquareLeft"},
        {Symbol::SquareRight, "SquareRight"},
        {Symbol::CurlyLeft, "CurlyLeft"},
        {Symbol::CurlyRight, "CurlyRight"},
        {Symbol::Question, "Question"},
        {Symbol::AtSign, "AtSign"},
        {Symbol::Hash, "Hash"},
        {Symbol::Dollar, "Dollar"},
        {Symbol::Backslash, "Backslash"},
        {Symbol::RangeExc, "RangeExc"},
        {Symbol::RangeInc, "RangeInc"},
        {Symbol::RightArrow, "RightArrow"},
        {Symbol::LambdaArrow, "LambdaArrow"},
    };

    const std::map<std::string, Symbol> literalToSymbol = {
        {"+", Symbol::Plus},
        {"-", Symbol::Minus},
        {"*", Symbol::Star},
        {"/", Symbol::Slash},
        {"%", Symbol::Percent},
        {"**", Symbol::Exponent},
        {"~", Symbol::Tilde},
        {"&", Symbol::Ampersand},
        {"^", Symbol::Caret},
        {"|", Symbol::Pipe},
        {"!", Symbol::Exclamation},
        {"++", Symbol::Plus2},
        {"--", Symbol::Minus2},
        {"&&", Symbol::Ampersand2},
        {"||", Symbol::Pipe2},
        {"<<", Symbol::LessThan2},
        {">>", Symbol::GreaterThan2},
        {"==", Symbol::Equal2},
        {"!=", Symbol::NotEqual},
        {"<", Symbol::LessThan},
        {">", Symbol::GreaterThan},
        {"<=", Symbol::LessEqual},
        {">=", Symbol::GreaterEqual},
        {"=", Symbol::Equal},
        {".", Symbol::Dot},
        {",", Symbol::Comma},
        {":", Symbol::Colon},
        {";", Symbol::Semicolon},
        {"(", Symbol::ParenLeft},
        {")", Symbol::ParenRight},
        {"[", Symbol::SquareLeft},
        {"]", Symbol::SquareRight},
        {"{", Symbol::CurlyLeft},
        {"}", Symbol::CurlyRight},
        {"?", Symbol::Question},
        {"@", Symbol::AtSign},
        {"#", Symbol::Hash},
        {"$", Symbol::Dollar},
        {"\\", Symbol::Backslash},
        {"..", Symbol::RangeExc},
        {"..=", Symbol::RangeInc},
        {"->", Symbol::RightArrow},
        {"=>", Symbol::LambdaArrow},
    };

    Symbol findSymbol(const std::string& content);

    std::ostream& operator<<(std::ostream& out, const Symbol& symbol);

}

#endif /* SYNTAX_SYMBOL_H_ */
