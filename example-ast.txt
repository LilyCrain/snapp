AbstractSyntaxTree{
 class[
  id(Person)
 ]{
  block{
   var[
    DataType{str},
    id(staticName)
   ];
   var[
    DataType{int},
    id(staticID)
   ];
   var[
    DataType{@str},
    id(liveAddress)
   ];
   var[
    DataType{@int},
    id(liveAge)
   ];
   var[
    private,
    DataType{str},
    id(ssn)
   ];
   observe(
    id(liveAddress),
    id(e)
   ){
    Call[
     id(print)
    ](
     Call[
      Access(
       id(e),
       id(get)
      )
     ](
     )
    )
   };
   fn[
    DataType{void},
    id(Person)
   ](
    var[
     DataType{str},
     id(name)
    ],
    var[
     DataType{@str},
     id(address)
    ]
   ){
    block{
     Assign(
      Access(
       id(this),
       id(staticName)
      ),
      id(name)
     );
     Assign(
      Access(
       id(this),
       id(liveAddress)
      ),
      id(address)
     )
    }
   };
   fn[
    DataType{@str},
    id(greet)
   ](
    var[
     DataType{Person},
     id(person)
    ]
   ){
    block{
     Call[
      id(print)
     ](
      Add(
       Add(
        str("Hello, "),
        Access(
         id(person),
         id(staticName)
        )
       ),
       str("! Here is my address.")
      )
     );
     return(
      Access(
       id(this),
       id(liveAddress)
      )
     )
    }
   }
  }
 };
 fn[
  DataType{int},
  id(test_fizzBuzz)
 ](
  var[
   DataType{int},
   id(count)
  ]
 ){
  block{
   var[
    DataType{int},
    id(fizzBuzzCount)
   ](
    int(0)
   );
   for(
    var[
     DataType{int},
     id(i)
    ](
     int(0)
    );
    LessThan(
     id(i),
     id(count)
    );
    PostInc(
     id(i)
    )
   ){
    block{
     var[
      DataType{bool},
      id(condFizz)
     ](
      Equal(
       Modulus(
        id(i),
        int(3)
       ),
       int(0)
      )
     );
     var[
      DataType{bool},
      id(condBuzz)
     ](
      Equal(
       Modulus(
        id(i),
        int(5)
       ),
       int(0)
      )
     );
     if(
      And(
       id(condFizz),
       id(condBuzz)
      )
     ){
      block{
       Call[
        id(print)
       ](
        str("FizzBuzz")
       );
       PreInc(
        id(fizzBuzzCount)
       )
      }
     }else{
      if(
       id(condFizz)
      ){
       Call[
        id(print)
       ](
        str("Fizz")
       )
      }else{
       if(
        id(condBuzz)
       ){
        Call[
         id(print)
        ](
         str("Buzz")
        )
       }else{
        Call[
         id(print)
        ](
         id(i)
        )
       }
      }
     }
    }
   };
   return(
    id(fizzBuzzCount)
   )
  }
 };
 fn[
  DataType{void},
  id(main)
 ](
 ){
  block{
   var[
    DataType{@str},
    id(person1Address)
   ](
    str("123")
   );
   var[
    DataType{@str},
    id(person2Address)
   ](
    str("456")
   );
   var[
    DataType{Person},
    id(person1)
   ](
    Call[
     id(Person)
    ](
     str("Bob"),
     id(person1Address)
    )
   );
   var[
    DataType{Person},
    id(person2)
   ](
    Call[
     id(Person)
    ](
     str("Jane"),
     id(person2Address)
    )
   );
   Call[
    id(print)
   ](
    Call[
     Access(
      id(person1),
      id(greet)
     )
    ](
     id(person2)
    )
   );
   Call[
    id(test_fizzBuzz)
   ](
    int(100)
   )
  }
 }
}